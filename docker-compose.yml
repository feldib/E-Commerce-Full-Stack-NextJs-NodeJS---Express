name: react-node-ecommerce
services:
  server:
    build: ./server
    restart: always
    environment:
      PORT: 5000
      DB_HOST: db
      DB_PORT: 3306
      DB_USER: ${MYSQL_USER}
      DB_PASSWORD: ${MYSQL_PASSWORD}
      DB_NAME: ${MYSQL_DATABASE}
      DB_CHARSET: ${DB_CHARSET}
      CLIENT_HOST: http://localhost:${REACT_PORT} # As I am testing in the browser
      SECRET_KEY: ${SECRET_KEY}
      SESSION_SECRET: ${SESSION_SECRET}
      SESSION_MAX_AGE: ${SESSION_MAX_AGE}
      TRANSPORTER_SERVICE: ${TRANSPORTER_SERVICE}
      TRANSPORTER_AUTH_USER: ${TRANSPORTER_AUTH_USER}
      TRANSPORTER_AUTH_PASS: ${TRANSPORTER_AUTH_PASS}
      DEEPL_API_KEY: ${DEEPL_API_KEY}
      ENABLE_REDIS: ${ENABLE_REDIS}
      REDIS_URL: redis://redis:6379
      MONGODB_URL: mongodb://mongodb:27017/translations
    ports:
      - "${SERVER_PORT}:5000"
    volumes:
      - server_public:/app/public
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
      mongodb:
        condition: service_started
  next-frontend:
    build:
      context: ./next-frontend
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_SERVER_URL: http://localhost:${SERVER_PORT}
    ports:
      - "${REACT_PORT}:3000"
    environment:
      PORT: 3000
    depends_on:
      - server
  db:
    image: mysql:8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    command:
      [
        "sh",
        "-c",
        "docker-entrypoint.sh mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --init-connect='SET NAMES utf8mb4 COLLATE utf8mb4_unicode_ci' & while ! mysqladmin ping -h localhost --silent; do sleep 1; done; echo 'MySQL DB container is ready!'; wait",
      ]
    ports:
      - "${MYSQL_PORT}:3306"
    volumes:
      - db_data:/var/lib/mysql
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s
      timeout: 5s
      retries: 10
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
  mongodb:
    image: mongo:7
    restart: always
    environment:
      MONGO_INITDB_DATABASE: translations
    ports:
      - "${MONGODB_PORT}:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
volumes:
  db_data:
  server_public:
  redis_data:
  mongodb_data:
